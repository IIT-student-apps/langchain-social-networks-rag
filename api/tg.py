import logging
import requests
import os
import sys
import uuid
from telegram import Update, Document
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from langchain_utils import get_rag_chain
from chroma_utils import index_document_to_chroma as index_document  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ ChromaDB
from chroma_utils import list_indexed_files
from chroma_utils import delete_doc_from_chroma
from dotenv import load_dotenv
from db_utils import get_chat_history
from db_utils import insert_application_logs, get_chat_history
from db_utils import get_all_sessions_for_user  
from db_utils import delete_chat_history
from db_utils import insert_application_logs
from vkapi import get_vk_chat_history
from vkapi import get_vk_subscriptions
from conversation import parse_vk_messages, conversation_to_prompt
from vkapi import get_vk_q_and_a
from vkapi import get_vk_post_reactions
from token_grabber import get_vk_token
from pathlib import Path
from vkapi import get_vk_post_reactions
from posts import parse_vk_posts, posts_to_prompt

#from telegram.constants import ParseMode  # –∏–º–ø–æ—Ä—Ç, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª
load_dotenv()
VK_ACCESS_TOKEN = os.getenv("VK_ACCESS_TOKEN")
VK_PEER_ID = os.getenv("VK_PEER_ID")
VK_USER_ID = os.getenv("VK_USER_ID")
VK_OWNER_ID = int(os.getenv("VK_OWNER_ID"))  # ID –≥—Ä—É–ø–ø—ã –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
VK_POST_ID = int(os.getenv("VK_POST_ID"))    # ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
VK_DOMAIN = os.getenv("VK_DOMAIN")
VK_CLIENT_ID = os.getenv("VK_CLIENT_ID")




TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
# –ü—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ, –≥–¥–µ –ª–µ–∂–∏—Ç —Å–∫—Ä–∏–ø—Ç
CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))

# –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
BASE_DIR = os.path.dirname(CURRENT_DIR)

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ rag_files, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
DOWNLOAD_FOLDER = os.path.join(BASE_DIR, "rag_files")
# –°–æ–∑–¥–∞—ë–º, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)

# –ó–∞–≥—Ä—É–∂–∞–µ–º RAG-–º–æ–¥–µ–ª—å
rag_chain = get_rag_chain()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

ENV_PATH = Path(__file__).resolve().parents[1] / ".env"

user_sessions = {}

os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)

async def start(update: Update, context: CallbackContext):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ó–∞–≥—Ä—É–∑–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É!")

async def chat(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    session_id = user_sessions.get(user_id, str(user_id))  # –µ—Å–ª–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Telegram ID

    user_text = update.message.text
    chat_history = get_chat_history(session_id)

    response = rag_chain.invoke({
        "input": user_text,
        "chat_history": chat_history
    })
    answer = response["answer"]

    await update.message.reply_text(answer)

    insert_application_logs(session_id, user_text, answer, model="telegram")



import uuid

async def handle_document(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    document = update.message.document
    file_id = document.file_id

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Å–≤–æ—ë
    file_name = document.file_name
    if not file_name:
        file_ext = os.path.splitext(document.mime_type)[1] or ".bin"
        file_name = f"file_{file_id}{file_ext}"

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –∏ –∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    base_name, ext = os.path.splitext(file_name)
    clean_name = f"{base_name}{ext}"
    file_path = os.path.join(DOWNLOAD_FOLDER, clean_name)

    # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –µ—Å—Ç—å, –¥–æ–±–∞–≤–∏–º —Å—É—Ñ—Ñ–∏–∫—Å
    counter = 1
    while os.path.exists(file_path):
        clean_name = f"{base_name}_{counter}{ext}"
        file_path = os.path.join(DOWNLOAD_FOLDER, clean_name)
        counter += 1

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file = await context.bot.get_file(file_id)
    await file.download_to_drive(file_path)

    # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º
    try:
        success = index_document(file_path, file_id=hash(clean_name))
        if success:
            await update.message.reply_text(f"‚úÖ –§–∞–π–ª *{clean_name}* –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω!", parse_mode="Markdown")
        else:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª {clean_name}.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")





async def list_files(update: Update, context: CallbackContext):
    file_info = list_indexed_files()
    if not file_info:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
        return

    message = "üìÇ *–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:*\n"
    for (fid, fname), count in file_info.items():
        message += f"‚Ä¢ `{fname}`\n  file\\_id: `{str(fid)}` ‚Äî {count} —á–∞–Ω–∫–æ–≤\n\n"

    await update.message.reply_text(message)




async def delete(update: Update, context: CallbackContext):
    try:
        file_id = int(context.args[0])
        result = delete_doc_from_chroma(file_id)
        if result:
            await update.message.reply_text(f"–î–æ–∫—É–º–µ–Ω—Ç—ã —Å file_id {file_id} —É–¥–∞–ª–µ–Ω—ã.")
        else:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å file_id {file_id}.")
    except (IndexError, ValueError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ file_id –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n/delete 123456789")


async def session_id_cmd(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    session_id = user_sessions.get(user_id, str(user_id))  # <-- –≤–∞–∂–Ω–æ!
    await update.message.reply_text(f"üÜî –¢–µ–∫—É—â–∏–π session_id:\n`{session_id}`", parse_mode="MarkdownV2")



async def history(update: Update, context: CallbackContext):
    session_id = str(update.effective_user.id)
    history = get_chat_history(session_id)

    if not history:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return

    message = f"üí¨ –ò—Å—Ç–æ—Ä–∏—è:\n"
    for msg in history[-10:]:  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        role = "üë§" if msg["role"] == "human" else "ü§ñ"
        content = msg["content"].strip()
        message += f"{role} {content}\n"

    # –î—Ä–æ–±–∏–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for chunk in split_message(message):
        await update.message.reply_text(chunk)


def split_message(text, max_length=4000):
    """–î–µ–ª–∏—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏"""
    return [text[i:i+max_length] for i in range(0, len(text), max_length)]



async def newchat(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    new_session_id = f"{user_id}_{uuid.uuid4()}"
    user_sessions[user_id] = new_session_id

    insert_application_logs(new_session_id, "[system] –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è", "", "telegram")

    await update.message.reply_text(
        f"‚ú® –ù–æ–≤—ã–π —á–∞—Ç –Ω–∞—á–∞—Ç!\n–¢–µ–∫—É—â–∏–π session_id: `{new_session_id}`" )


async def switch(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    try:
        new_session_id = context.args[0]
        user_sessions[user_id] = new_session_id
        await update.message.reply_text(f"üîÅ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Å–µ—Å—Å–∏—é `{new_session_id}`")
    except IndexError:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏ session_id. –ü—Ä–∏–º–µ—Ä: /switch 8f1c...")


async def sessions(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    sessions = get_all_sessions_for_user(user_id)
    if not sessions:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
        return

    message = "üìÇ –¢–≤–æ–∏ —Å–µ—Å—Å–∏–∏:\n"
    for sid in sessions:
        active_marker = " (—Ç–µ–∫—É—â–∞—è)" if user_sessions.get(update.effective_user.id) == sid else ""
        message += f"‚Ä¢ `{sid}`{active_marker}\n"

    await update.message.reply_text(message)


async def reset(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    session_id = user_sessions.get(user_id, str(user_id))

    delete_chat_history(session_id)
    await update.message.reply_text(f"üßπ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –¥–ª—è session_id `{session_id}` —É–¥–∞–ª–µ–Ω–∞.")



async def vkchat(update: Update, context: CallbackContext):
    user_prompt = " ".join(context.args).strip()

    if not user_prompt:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å –ø–µ—Ä–µ–ø–∏—Å–∫–æ–π.\n\n–ü—Ä–∏–º–µ—Ä:\n`/vkchat –æ–±–æ–±—â–∏ –ø–µ—Ä–µ–ø–∏—Å–∫—É`", parse_mode="MarkdownV2")
        return

    try:
        await update.message.reply_text("üì• –ó–∞–≥—Ä—É–∂–∞—é –ø–µ—Ä–µ–ø–∏—Å–∫—É –∏–∑ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ...")

        vk_data = get_vk_chat_history(VK_PEER_ID, VK_ACCESS_TOKEN)
        if not vk_data:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É –∏–∑ VK.")
            return

        convo = parse_vk_messages(vk_data)
        prompt = conversation_to_prompt(convo, user_prompt)

        response = rag_chain.invoke({"input": prompt, "chat_history": []})
        await update.message.reply_text(f"üß† –û—Ç–≤–µ—Ç:\n{response['answer']}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")

def format_conversation_text(convo):
    return "\n".join(
        [f"{msg.author_first_name} {msg.author_last_name}: {msg.text}" for msg in convo.messages]
    )


async def vkraw(update: Update, context: CallbackContext):
    try:
        await update.message.reply_text("üì• –ü–æ–ª—É—á–∞—é –ø–µ—Ä–µ–ø–∏—Å–∫—É –∏–∑ VK...")

        vk_data = get_vk_chat_history(VK_PEER_ID, VK_ACCESS_TOKEN)
        if not vk_data:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É –∏–∑ VK.")
            return

        convo = parse_vk_messages(vk_data)
        raw_text = format_conversation_text(convo)

        # –î–µ–ª–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ (–≤ Telegram –µ—Å—Ç—å –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        max_len = 4000
        parts = [raw_text[i:i+max_len] for i in range(0, len(raw_text), max_len)]

        for i, part in enumerate(parts):
            await update.message.reply_text(f"{part}")

        await update.message.reply_text(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(parts)} —Å–æ–æ–±—â–µ–Ω–∏–π.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")


async def vksubs(update: Update, context: CallbackContext):
    await update.message.reply_text("üì° –ó–∞–≥—Ä—É–∂–∞—é –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ...")

    try:
        result = get_vk_subscriptions(VK_USER_ID, VK_ACCESS_TOKEN)
        if not result or "response" not in result:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏.")
            return

        groups = result["response"]["items"]
        if not groups:
            await update.message.reply_text("üîç –ü–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        lines = []
        for group in groups:
            name = group.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            count = group.get("members_count", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            desc = group.get("description", "‚Äî")

            lines.append(
                f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {name}\n"
                f"*–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* {count}\n"
                f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {desc[:200]}{'...' if len(desc) > 200 else ''}\n"
                f"`‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`"
            )

        full_text = "\n\n".join(lines)

        # üü¢ –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        if not context.args:
            for i in range(0, len(full_text), 4000):
                await update.message.reply_text(full_text[i:i+4000])
            return

        # üß† –ï—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ LLM
        user_prompt = " ".join(context.args)
        llm_input = f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ:\n\n{full_text}\n\n{user_prompt}"

        response = rag_chain.invoke({"input": llm_input, "chat_history": []})
        await update.message.reply_text(f"üß† –û—Ç–≤–µ—Ç:\n{response['answer']}")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def vkcomments(update: Update, context: CallbackContext):
    try:
        await update.message.reply_text("üí¨ –ó–∞–≥—Ä—É–∂–∞—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É –í–ö–æ–Ω—Ç–∞–∫—Ç–µ...")

        result = get_vk_q_and_a(VK_OWNER_ID, VK_POST_ID, VK_ACCESS_TOKEN)
        if not result or "response" not in result:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.")
            return

        comments = result["response"].get("items", [])
        profiles = {p["id"]: p.get("name") or f"{p.get('first_name', '')} {p.get('last_name', '')}".strip()
                    for p in result["response"].get("profiles", []) + result["response"].get("groups", [])}

        if not comments:
            await update.message.reply_text("üîç –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        comment_texts = []
        for comment in comments[:150]:  # –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç
            user_id = comment.get("from_id")
            author = profiles.get(user_id, f"ID {user_id}")
            text = comment.get("text", "").strip()
            if text:
                comment_texts.append(f"{author}: {text}")

        full_text = "\n".join(comment_texts)

        # üëá –í–∞—Ä–∏–∞–Ω—Ç 1: –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
        if not context.args:
            for i in range(0, len(full_text), 4000):
                await update.message.reply_text(full_text[i:i+4000])
            return

        # üëá –í–∞—Ä–∏–∞–Ω—Ç 2: –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º –≤ LLM
        user_prompt = " ".join(context.args)
        llm_input = f"–í–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É –í–ö–æ–Ω—Ç–∞–∫—Ç–µ:\n\n{full_text}\n\n{user_prompt}"

        response = rag_chain.invoke({"input": llm_input, "chat_history": []})
        await update.message.reply_text(f"üß† –û—Ç–≤–µ—Ç:\n{response['answer']}")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")



async def vkreactions(update: Update, context: CallbackContext):
    try:
        await update.message.reply_text("üìä –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å—Ç—ã –∏ —Ä–µ–∞–∫—Ü–∏–∏...")

        # –ü–æ–ª—É—á–∞–µ–º JSON —Å –ø–æ—Å—Ç–∞–º–∏
        result = get_vk_post_reactions(VK_OWNER_ID, VK_ACCESS_TOKEN)
        if not result or "response" not in result:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã.")
            return

        post_list = parse_vk_posts(result, post_number=10)  # –ø–∞—Ä—Å–∏–º –∏ –±–µ—Ä—ë–º –¥–æ 10 –ø–æ—Å—Ç–æ–≤

        if not post_list.posts:
            await update.message.reply_text("üîç –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        if not context.args:
            # üìã –ü—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            for post in post_list.posts:
                short_text = post.text[:60].replace("\n", " ") + "‚Ä¶" if len(post.text) > 60 else post.text
                msg = (
                    f"üìù *{short_text}*\n"
                    f"üëç {post.likes} | üí¨ {post.comments} | üîÅ {post.reposts} | üëÅ {post.views}\n"
                    f"`‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`"
                )
                await update.message.reply_text(msg, parse_mode="Markdown")
            return

        # üß† –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ LLM
        question = " ".join(context.args)
        prompt = posts_to_prompt(post_list, question)
        response = rag_chain.invoke({"input": prompt, "chat_history": []})

        await update.message.reply_text(f"üß† –û—Ç–≤–µ—Ç:\n{response['answer']}")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


def update_env_file_key(key: str, value: str, path=ENV_PATH):
    updated = False
    lines = []

    if path.exists():
        with path.open("r", encoding="utf-8") as f:
            lines = f.readlines()

        for i, line in enumerate(lines):
            if line.startswith(f"{key}="):
                lines[i] = f"{key}={value}\n"
                updated = True
                break

    if not updated:
        lines.append(f"{key}={value}\n")

    with path.open("w", encoding="utf-8") as f:
        f.writelines(lines)

async def set_env(update: Update, context: CallbackContext):
    if len(context.args) < 2:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set KEY VALUE\n–ù–∞–ø—Ä–∏–º–µ—Ä: /set VK_USER_ID 123456789")
        return

    key = context.args[0].strip().upper()
    value = " ".join(context.args[1:]).strip()

    allowed_keys = {"VK_PEER_ID", "VK_USER_ID", "VK_OWNER_ID", "VK_POST_ID", "VK_ACCESS_TOKEN", "VK_START_CMID", "VK_COUNT", "VK_CLIENT_ID"}
    if key not in allowed_keys:
        await update.message.reply_text(f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–ª—é—á: `{key}`", parse_mode="Markdown")
        return

    try:
        update_env_file_key(key, value)
        await update.message.reply_text(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è `{key}` –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ `{value}`", parse_mode="Markdown")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")



async def gettoken(update: Update, context: CallbackContext):
    await update.message.reply_text("üåê –°–µ–π—á–∞—Å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ...")
    token = await get_vk_token()
    await update.message.reply_text(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ .env:\n`{token}`")


async def restart_bot(update: Update, context: CallbackContext):
    await update.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await context.bot.close()  # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

    # –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    os.execv(sys.executable, [sys.executable] + sys.argv)

def read_env_file():
    env = {}
    if ENV_PATH.exists():
        with open(ENV_PATH, "r", encoding="utf-8") as f:
            for line in f:
                if "=" in line:
                    k, v = line.strip().split("=", 1)
                    env[k] = v
    return env

async def get_env(update: Update, context: CallbackContext):
    allowed_keys = {
        "VK_PEER_ID",
        "VK_USER_ID",
        "VK_OWNER_ID",
        "VK_POST_ID",
        "VK_ACCESS_TOKEN",
        "VK_CLIENT_ID",
        "VK_COUNT",
        "VK_START_CMID"
    }

    if not context.args:
        await update.message.reply_text(
            "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /get VK_USER_ID\n–ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –∏–∑: " +
            ", ".join(allowed_keys)
        )
        return

    key = context.args[0].strip().upper()
    if key not in allowed_keys:
        await update.message.reply_text(f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–ª—é—á: `{key}`", parse_mode="Markdown")
        return

    env_vars = read_env_file()
    value = env_vars.get(key)

    if value:
        await update.message.reply_text(f"üîê `{key}` = `{value}`", parse_mode="Markdown")
    else:
        await update.message.reply_text(f"‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ `{key}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ .env", parse_mode="Markdown")


async def close_bot(update: Update, context: CallbackContext):
    await update.message.reply_text("–í—ã–∫–ª—é—á–µ–Ω–∏–µ...")
    await context.bot.close()  # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("list", list_files))
    app.add_handler(CommandHandler("delete", delete))  
    app.add_handler(CommandHandler("history", history))
    app.add_handler(CommandHandler("session_id", session_id_cmd))
    app.add_handler(CommandHandler("sessions", sessions))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("vkchat", vkchat))
    app.add_handler(CommandHandler("vkraw", vkraw))
    app.add_handler(CommandHandler("vksubs", vksubs))
    app.add_handler(CommandHandler("vkcomments", vkcomments))
    app.add_handler(CommandHandler("vkreactions", vkreactions))
    app.add_handler(CommandHandler("gettoken", gettoken))
    app.add_handler(CommandHandler("set", set_env))
    app.add_handler(CommandHandler("restart", restart_bot))
    app.add_handler(CommandHandler("get", get_env))
    app.add_handler(CommandHandler("close", close_bot))




    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    


    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()