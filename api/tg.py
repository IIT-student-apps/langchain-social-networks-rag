import logging
import requests
import os
from telegram import Update, Document
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from langchain_utils import get_rag_chain
from chroma_utils import index_document_to_chroma as index_document  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ ChromaDB
from chroma_utils import list_indexed_files
from chroma_utils import delete_doc_from_chroma
from dotenv import load_dotenv
from db_utils import get_chat_history
from db_utils import insert_application_logs, get_chat_history



load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
# –ü—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ, –≥–¥–µ –ª–µ–∂–∏—Ç —Å–∫—Ä–∏–ø—Ç
CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))

# –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
BASE_DIR = os.path.dirname(CURRENT_DIR)

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ rag_files, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
DOWNLOAD_FOLDER = os.path.join(BASE_DIR, "rag_files")
# –°–æ–∑–¥–∞—ë–º, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)

# –ó–∞–≥—Ä—É–∂–∞–µ–º RAG-–º–æ–¥–µ–ª—å
rag_chain = get_rag_chain()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)

async def start(update: Update, context: CallbackContext):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ó–∞–≥—Ä—É–∑–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É!")

async def chat(update: Update, context: CallbackContext):
    user_text = update.message.text
    session_id = str(update.effective_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏–∑ –±–∞–∑—ã
    chat_history = get_chat_history(session_id)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = rag_chain.invoke({
        "input": user_text,
        "chat_history": chat_history
    })
    answer = response["answer"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(answer)

    # –õ–æ–≥–∏—Ä—É–µ–º –≤ –ë–î
    insert_application_logs(session_id, user_text, answer, model="telegram")


async def handle_document(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    document: Document = update.message.document
    file_id = document.file_id
    file_name = document.file_name

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file = await context.bot.get_file(file_id)
    file_path = os.path.join(DOWNLOAD_FOLDER, file_name)
    await file.download_to_drive(file_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ ChromaDB
    try:
        success = index_document(file_path, file_id=hash(file_name))  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º file_id –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        if success:
            await update.message.reply_text(f"–§–∞–π–ª {file_name} –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω!")
        else:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª {file_name}.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")


from telegram.constants import ParseMode  # –∏–º–ø–æ—Ä—Ç, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª

async def list_files(update: Update, context: CallbackContext):
    file_info = list_indexed_files()
    if not file_info:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
        return

    message = "üìÇ *–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:*\n"
    for fid, count in file_info.items():
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã: \ –Ω—É–∂–Ω–æ –¥–ª—è MarkdownV2
        message += f"‚Ä¢ file\\_id: `{str(fid)}` ‚Äî {count} —á–∞–Ω–∫–æ–≤\n"

    await update.message.reply_text(message)



async def delete(update: Update, context: CallbackContext):
    try:
        file_id = int(context.args[0])
        result = delete_doc_from_chroma(file_id)
        if result:
            await update.message.reply_text(f"–î–æ–∫—É–º–µ–Ω—Ç—ã —Å file_id {file_id} —É–¥–∞–ª–µ–Ω—ã.")
        else:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å file_id {file_id}.")
    except (IndexError, ValueError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ file_id –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n/delete 123456789")


async def session_id_cmd(update: Update, context: CallbackContext):
    session_id = str(update.effective_user.id)
    await update.message.reply_text(f"üÜî –¢–≤–æ–π session_id: `{session_id}`")


async def history(update: Update, context: CallbackContext):
    session_id = str(update.effective_user.id)
    history = get_chat_history(session_id)

    if not history:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return

    message = f"üí¨ –ò—Å—Ç–æ—Ä–∏—è:\n"
    for msg in history[-10:]:  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        role = "üë§" if msg["role"] == "human" else "ü§ñ"
        content = msg["content"].strip()
        message += f"{role} {content}\n"

    # –î—Ä–æ–±–∏–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for chunk in split_message(message):
        await update.message.reply_text(chunk)


def split_message(text, max_length=4000):
    """–î–µ–ª–∏—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏"""
    return [text[i:i+max_length] for i in range(0, len(text), max_length)]

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list", list_files))
    app.add_handler(CommandHandler("delete", delete))  
    app.add_handler(CommandHandler("history", history))
    app.add_handler(CommandHandler("session_id", session_id_cmd))


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
