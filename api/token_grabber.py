import asyncio
from playwright.async_api import async_playwright
import os
from pathlib import Path

ENV_FILE = Path(__file__).resolve().parents[1] / ".env"

async def get_vk_token():
    token_found = None

    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=False)
        context = await browser.new_context()
        page = await context.new_page()

        def check_request(request):
            nonlocal token_found
            try:
                data = request.post_data_json
                if "access_token" in data:
                    token_found = data["access_token"]
            except:
                pass

        page.on("requestfinished", check_request)

        print("üåê –û—Ç–∫—Ä—ã–ª—Å—è –±—Ä–∞—É–∑–µ—Ä. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ (–µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥)...")
        await page.goto("https://vk.com")

        # –î–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é
        await page.wait_for_timeout(60_000)

        print("‚è≥ –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å —Ç–æ–∫–µ–Ω...")

        # –ü–æ–ø—ã—Ç–∫–∏ –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ (–æ–±–Ω–æ–≤–ª—è—è —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫)
        for _ in range(6):
            if token_found:
                break
            await page.goto("https://vk.com/feed")
            await page.wait_for_timeout(5000)

        if token_found:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω access_token:\n{token_found}")
            update_env_file("VK_ACCESS_TOKEN", token_found)
            print("üíæ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ .env")
        else:
            print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

        await context.close()
        await browser.close()
        return token_found

def update_env_file(key, value):
    updated = False
    lines = []

    if os.path.exists(ENV_FILE):
        with open(ENV_FILE, "r", encoding="utf-8") as f:
            lines = f.readlines()

        for i, line in enumerate(lines):
            if line.startswith(f"{key}="):
                lines[i] = f"{key}={value}\n"
                updated = True
                break

    if not updated:
        lines.append(f"{key}={value}\n")

    with open(ENV_FILE, "w", encoding="utf-8") as f:
        f.writelines(lines)
